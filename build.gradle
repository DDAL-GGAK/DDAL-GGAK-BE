buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.9'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id 'jacoco'
}
jar {
    enabled = false
}
group = 'com.ddalgak'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

ext["hibernate.version"] = "5.6.5.Final"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    //security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    //swagger
    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.14'

    //mockito
    testImplementation 'org.mockito:mockito-core:4.8.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.8.0'

    //logback
    implementation 'com.github.maricn:logback-slack-appender:1.6.1'

    //AWS S3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    //jwt token
    compileOnly group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'

    //validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    //mail발송
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // mysql
    implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.32'

    //querydsl
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}"

    //Oauth2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    //mapstruct
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

    //hateoas
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'

    // websocket, stomp
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.webjars:stomp-websocket:2.3.3'
    implementation 'org.webjars:webjars-locator-core'
    implementation 'org.webjars:sockjs-client:1.0.2'
    implementation 'org.webjars:bootstrap:3.3.7'
    implementation 'org.webjars:jquery:3.1.1-1'
    // 엔드포인트 조회
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    //gson
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'

}

tasks.named('test') {
    useJUnitPlatform()
}

//querydsl 추가 시작
def querydslDir = "$buildDir/generated/querydsl"
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
configurations {
    querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

clean {
    delete file('src/main/generated')
}
//test {
//     테스트 코드 빌드 제외
//    enabled = false
//}

jacocoTestReport {
    reports {
        html.enabled true // html 형식으로 볼 수 있다.
        xml.enabled false
        csv.enabled false
    }

    // 아래 afterEvaluate 부분은 리포트를 보여줄 때, 제외하고 싶은 것을 의미한다.
    // 현재 프로젝트에서 있는 QueryDSL과 룸북의 Builder 어노테이션이 만들어주는 코드를
    // 테스트하는 것은 의미없으므로 제외해준다.
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, excludes: [
                    '**/aggregate/Q*', // QueryDSL이 생성하는 엔티티를 제외한다.
                    '**/*Builder*' // 룸북을 통해 생성된 빌더를 제외한다.
            ])
        }))
    }

    finalizedBy 'jacocoTestCoverageVerification' // 작업 후 여기 있는 task를 실행한다.
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            // 위에서 제외해준 것은 리포트를 표시할 때만 안보여주는 것이므로,
            // 위에서 제외했어도 검증은 하게 된다.
            // 빌드 시 검증에 실패하게 되면 빌드가 되지 않으므로 다음과 같이 작성해주자.
            excludes = [
                    '**.aggregate.Q*',
                    '**.*Builder*',
            ]
            limit {
                counter = 'LINE' // 라인 기준이며, 이 외에도 BRANCH, CLASS, METHOD, INSTRUCTION이 있다.
                value = 'COVEREDRATIO' // 리포트의 커버리지 달성 정도를 %로 표기.
                minimum = 1.00 // 최소 커버리지 달성 요구 조건. 여기서는 100%를 의미.
            }
        }
    }
}

test {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}